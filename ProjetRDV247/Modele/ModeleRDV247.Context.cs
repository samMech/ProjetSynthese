//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjetRDV247.Modele
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RDV247Entities : DbContext
    {
        public RDV247Entities()
            : base("name=RDV247Entities")
        {
            // Pour désactiver les proxy pour que la sérialisation json fonctionne
            Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Employe> Employe { get; set; }
        public virtual DbSet<Rendezvous> Rendezvous { get; set; }
        public virtual DbSet<Typerdv> Typerdv { get; set; }
    
        public virtual int ajouterClient(string pNom, string pPrenom, string pTel, string pCourriel, string pPassword, ObjectParameter responseMessage, ObjectParameter responseCode)
        {
            var pNomParameter = pNom != null ?
                new ObjectParameter("pNom", pNom) :
                new ObjectParameter("pNom", typeof(string));
    
            var pPrenomParameter = pPrenom != null ?
                new ObjectParameter("pPrenom", pPrenom) :
                new ObjectParameter("pPrenom", typeof(string));
    
            var pTelParameter = pTel != null ?
                new ObjectParameter("pTel", pTel) :
                new ObjectParameter("pTel", typeof(string));
    
            var pCourrielParameter = pCourriel != null ?
                new ObjectParameter("pCourriel", pCourriel) :
                new ObjectParameter("pCourriel", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterClient", pNomParameter, pPrenomParameter, pTelParameter, pCourrielParameter, pPasswordParameter, responseMessage, responseCode);
        }
    
        public virtual int ajouterEmploye(string pNom, string pPrenom, string pNumEmp, string pTypeCompte, string pPassword, ObjectParameter responseMessage, ObjectParameter responseCode)
        {
            var pNomParameter = pNom != null ?
                new ObjectParameter("pNom", pNom) :
                new ObjectParameter("pNom", typeof(string));
    
            var pPrenomParameter = pPrenom != null ?
                new ObjectParameter("pPrenom", pPrenom) :
                new ObjectParameter("pPrenom", typeof(string));
    
            var pNumEmpParameter = pNumEmp != null ?
                new ObjectParameter("pNumEmp", pNumEmp) :
                new ObjectParameter("pNumEmp", typeof(string));
    
            var pTypeCompteParameter = pTypeCompte != null ?
                new ObjectParameter("pTypeCompte", pTypeCompte) :
                new ObjectParameter("pTypeCompte", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajouterEmploye", pNomParameter, pPrenomParameter, pNumEmpParameter, pTypeCompteParameter, pPasswordParameter, responseMessage, responseCode);
        }
    
        public virtual int authentifierClient(string pCourriel, string pPassword, ObjectParameter responseMessage, ObjectParameter responseCode, ObjectParameter id_client)
        {
            var pCourrielParameter = pCourriel != null ?
                new ObjectParameter("pCourriel", pCourriel) :
                new ObjectParameter("pCourriel", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("authentifierClient", pCourrielParameter, pPasswordParameter, responseMessage, responseCode, id_client);
        }
    
        public virtual int authentifierEmploye(string pNumEmp, string pPassword, ObjectParameter responseMessage, ObjectParameter responseCode, ObjectParameter id_employe)
        {
            var pNumEmpParameter = pNumEmp != null ?
                new ObjectParameter("pNumEmp", pNumEmp) :
                new ObjectParameter("pNumEmp", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("authentifierEmploye", pNumEmpParameter, pPasswordParameter, responseMessage, responseCode, id_employe);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
